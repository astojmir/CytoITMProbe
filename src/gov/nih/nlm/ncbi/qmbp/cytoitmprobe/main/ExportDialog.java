//
// ===========================================================================
//
//                            PUBLIC DOMAIN NOTICE
//               National Center for Biotechnology Information
//
//  This software/database is a "United States Government Work" under the
//  terms of the United States Copyright Act.  It was written as part of
//  the author's official duties as a United States Government employee and
//  thus cannot be copyrighted.  This software/database is freely available
//  to the public for use. The National Library of Medicine and the U.S.
//  Government have not placed any restriction on its use or reproduction.
//
//  Although all reasonable efforts have been taken to ensure the accuracy
//  and reliability of the software and data, the NLM and the U.S.
//  Government do not and cannot warrant the performance or results that
//  may be obtained by using this software or data. The NLM and the U.S.
//  Government disclaim all warranties, express or implied, including
//  warranties of performance, merchantability or fitness for any particular
//  purpose.
//
//  Please cite the author in any work or product based on this material.
//
// ===========================================================================
//
// Code authors:  Aleksandar Stojmirovic, Alexander Bliskovsky
//

package gov.nih.nlm.ncbi.qmbp.cytoitmprobe.main;

import cytoscape.CyNetwork;
import cytoscape.Cytoscape;
import cytoscape.task.Task;
import cytoscape.task.TaskMonitor;
import cytoscape.task.ui.JTaskConfig;
import cytoscape.task.util.TaskManager;
import cytoscape.util.CyFileFilter;
import cytoscape.util.FileUtil;
import gov.nih.nlm.ncbi.qmbp.cytoitmprobe.results.ItmProbeResults;
import gov.nih.nlm.ncbi.qmbp.cytoitmprobe.results.ItmProbeResultsFactory;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author stojmira
 */
public class ExportDialog extends javax.swing.JDialog {

    List<String []> itmData;
    
    /** Creates new form RestoreDialog */
    public ExportDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        populateItmList();
    }

    private void populateItmList() {
        CyNetwork currentNetwork = Cytoscape.getCurrentNetwork();
        itmData = ItmProbeResultsFactory.findStoredItms(currentNetwork, false);
        if (itmData.isEmpty()) {
            return;
        }
        itmList.setModel(new javax.swing.AbstractListModel() {
          public int getSize() { return itmData.size(); }
          public Object getElementAt(int i) { return itmData.get(i)[1]; }
        });
        itmList.setSelectedIndex(0);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        itmList = new javax.swing.JList();
        OkButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        fileBox = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Restore ITM From Current Network");
        setMinimumSize(new java.awt.Dimension(589, 232));
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        setResizable(false);

        jLabel11.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 51, 102));
        jLabel11.setText("Choose an ITM to export to a TAB-delimited file");
        jLabel11.setToolTipText("");

        itmList.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        itmList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(itmList);

        OkButton.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        OkButton.setText("OK");
        OkButton.setToolTipText("Export selected ITM");
        OkButton.setEnabled(false);
        OkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OkButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        cancelButton.setText("CANCEL");
        cancelButton.setToolTipText("Close this window");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        fileBox.setEditable(false);
        fileBox.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        fileBox.setText("Please select an output file ...");
        fileBox.setPreferredSize(new java.awt.Dimension(4, 26));

        browseButton.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        browseButton.setText("Browse ...");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(org.jdesktop.layout.GroupLayout.CENTER, jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 557, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(org.jdesktop.layout.GroupLayout.CENTER, layout.createSequentialGroup()
                                .add(OkButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(cancelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jLabel11)))
                    .add(layout.createSequentialGroup()
                        .add(23, 23, 23)
                        .add(fileBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(browseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(jLabel11)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 148, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(fileBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(browseButton))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(OkButton)
                    .add(cancelButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void OkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OkButtonActionPerformed

        int itmIndex = itmList.getSelectedIndex();
        String exportFile = fileBox.getText();
        
        ItmExport task = new ItmExport(itmIndex, exportFile);
        // Configure JTask Dialog Pop-Up Box
        JTaskConfig jTaskConfig = new JTaskConfig();
        jTaskConfig.setOwner(Cytoscape.getDesktop());
        jTaskConfig.displayCloseButton(true);
        jTaskConfig.displayCancelButton(true);

        jTaskConfig.displayStatus(true);
        jTaskConfig.setAutoDispose(true);
        jTaskConfig.displayTimeElapsed(true);
        jTaskConfig.displayTimeRemaining(false);
        
        // Execute Task in New Thread; pops open JTask Dialog Box.
        TaskManager.executeTask(task, jTaskConfig);
	setVisible(false);
	dispose();
        if (task.errMsg != null) {        
            JOptionPane.showMessageDialog(Cytoscape.getDesktop(),
                                          task.errMsg,
                                          "Export ITM Probe Results",
                                          JOptionPane.ERROR_MESSAGE);
        }
}//GEN-LAST:event_OkButtonActionPerformed

private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
	setVisible(false);
	dispose();

}//GEN-LAST:event_cancelButtonActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed

        final String extension = "tab";
        CyFileFilter filter = new CyFileFilter(extension, "TAB-delimited file");
        int itmIndex = itmList.getSelectedIndex();
        String queryPrefix = itmData.get(itmIndex)[0];
        File suggestedFile = new File(queryPrefix + ".tab");        
        File chosenFile = FileUtil.getFile("CytoITMprobe",
                                           FileUtil.SAVE,
                                           filter,
                                           suggestedFile);
        if (chosenFile == null) {
            return;
        }
        fileBox.setText(chosenFile.getAbsolutePath());
        OkButton.setEnabled(true);
    }//GEN-LAST:event_browseButtonActionPerformed

    private class ItmExport implements Task {
        
        private cytoscape.task.TaskMonitor taskMonitor;
        private int itmIndex;
        private String exportFile;
        boolean isHalted = false;
        String errMsg = null;
        
        public ItmExport(int itmIndex, String exportFile) {
            this.itmIndex = itmIndex;
            this.exportFile = exportFile;
        }

        public void setTaskMonitor(TaskMonitor monitor)
                        throws IllegalThreadStateException {
            taskMonitor = monitor;
        }

        public void halt() {
            isHalted = true;
        }

        public String getTitle() {
            return "Exporting ITM to TAB file";
        }

        public void run() {
            
            try {
                taskMonitor.setPercentCompleted(0);
                taskMonitor.setStatus("Saving ITM");

                CyNetwork currentNetwork = Cytoscape.getCurrentNetwork();
                taskMonitor.setPercentCompleted(20);
                String queryPrefix = itmData.get(itmIndex)[0];
                ItmProbeResults results = ItmProbeResultsFactory.fromCyNetwork(
                        currentNetwork, queryPrefix);

                FileWriter writer = new FileWriter(exportFile);
                results.exportToTab(writer);
                writer.close();

                taskMonitor.setPercentCompleted(100);
            }
            catch (IOException ex) {
                errMsg = "Could not export data to " + exportFile + ".\n\n" +
                         ex.getMessage();
            }                           
            catch (Exception ex) {
                taskMonitor.setException(ex, null);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OkButton;
    private javax.swing.JButton browseButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField fileBox;
    private javax.swing.JList itmList;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
